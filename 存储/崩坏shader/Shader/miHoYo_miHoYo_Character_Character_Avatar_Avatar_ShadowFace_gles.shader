//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_Avatar/Avatar_ShadowFace" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_EnvColor ("Env Color", Color) = (1,1,1,1)
_Scale ("Scale Compared to Maya", Float) = 0.01
_BloomFactor ("Bloom Factor", Float) = 1
_MainTex ("Main Tex (RGB)", 2D) = "white" { }
_LightMapTex ("Light Map Tex (RGB)", 2D) = "gray" { }
_LightSpecColor ("Light Specular Color", Color) = (1,1,1,1)
_LightArea ("Light Area Threshold", Range(0, 1)) = 0.51
_SecondShadow ("Second Shadow Threshold", Range(0, 1)) = 0.51
_FirstShadowMultColor ("First Shadow Multiply Color", Color) = (0.9,0.7,0.75,1)
_SecondShadowMultColor ("Second Shadow Multiply Color", Color) = (0.75,0.6,0.65,1)
_Shininess ("Specular Shininess", Range(0.1, 100)) = 10
_SpecMulti ("Specular Multiply Factor", Range(0, 1)) = 0.1
_OutlineWidth ("Outline Width", Range(0, 100)) = 0.2
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_MaxOutlineZOffset ("Max Outline Z Offset", Range(0, 100)) = 1
_OutlineCamStart ("Outline Camera Adjustment Start Distance", Range(0, 10000)) = 1000
_FadeDistance ("Fade Start Distance", Range(0.1, 10)) = 0.5
_FadeOffset ("Fade Start Offset", Range(0, 10)) = 1
[Toggle(LOOKUP_COLOR)] _LookupColor ("Lookup Color", Float) = 0
[Toggle(LOOKUP_COLOR_BILINEAR)] _LookupColorBilinear ("Lookup Color Bilinear", Float) = 0
_factorTex ("Factor Tex", 2D) = "white" { }
_indexTex ("Index Tex", 2D) = "white" { }
_tableTex ("Lookup Tex", 2D) = "white" { }
[Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOpaqueness ("SP Opaqueness", Range(0, 1)) = 1
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
_SPCubeMap ("SP CubeMap", Cube) = "white" { }
_SPCubeMapColor ("SP CubeMap Color", Color) = (1,1,1,0)
_SPCubeMapOffset ("SP CubeMap Offset", Vector) = (0,0,0,0)
_SPCubeMapIntensity ("SP CubeMap Intensity", Range(0, 1)) = 0
_SPCubeMapNoiseIntensity ("SP CubeMap Noise Intensity", Range(0, 5)) = 0
_SPCubeMapBrightness ("SP CubeMap Brightness", Float) = 1.26
_SPOldColor ("SP Old Color", Color) = (1,1,1,0)
[Toggle(RIM_GLOW)] _RimGlow ("Rim Glow", Float) = 0
_RGColor ("Rim Glow Color", Color) = (1,1,1,1)
_RGShininess ("Rim Glow Shininess", Float) = 1
_RGScale ("Rim Glow Scale", Float) = 1
_RGBias ("Rim Glow Bias", Float) = 0
_RGRatio ("Rim Glow Ratio", Range(0, 1)) = 0.5
_RGBloomFactor ("Rim Glow Bloom Factor", Float) = 1
[Toggle(DISTORTION)] _Distortion ("Distortion", Float) = 0
_DTTex ("Distortion Tex", 2D) = "gray" { }
_DTIntensity ("Distortion Intensity", Range(1, 9)) = 5
_DTPlaySpeed ("Distortion Play Speed", Float) = 0
_DTNormalDisplacment ("Distortion Normal Displacment", Float) = 0
_DTUVScaleInX ("Distortion UV Scale in X", Float) = 1
_DTUVScaleInY ("Distortion UV Scale in Y", Float) = 1
_DTFresnel ("Distortion Fresnel Params", Vector) = (1,1,0,0)
[Toggle(SHADOWFACE)] _ShadowFace ("ShadowFace", Float) = 0
_FaceShadowColor ("FaceShadowColor", Color) = (0.9,0.7,0.75,1)
_FaceShadowTex ("FaceShadowTex (RGB)", 2D) = "white" { }
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
_VertexAlphaFactor ("Alpha From Vertex Factor (0: not use)", Range(0, 1)) = 0
[Toggle(USINGDITHERALPAH)] _UsingDitherAlpha ("UsingDitherAlpha", Float) = 0
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
}
SubShader {
 LOD 200
 Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
  GpuProgramID 6160
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  outColor_6.xyz = color_21;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_24;
    tmpvar_24 = (tmpvar_23 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_24.x) + ((1.0 - tmpvar_24.x) * color_21));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  outColor_5.xyz = color_31;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_34;
    tmpvar_34 = (tmpvar_33 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_34.x) + ((1.0 - tmpvar_34.x) * color_31));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  outColor_5.xyz = color_74;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_76;
    tmpvar_76 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_77;
    tmpvar_77 = (tmpvar_76 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_77.x) + ((1.0 - tmpvar_77.x) * color_74));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_21;
  color_21 = outColor_6.xyz;
  mediump vec3 tmpvar_22;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_22 = _lightProbColor.xyz;
  } else {
    tmpvar_22 = vec3(1.0, 1.0, 1.0);
  };
  color_21 = (outColor_6.xyz * tmpvar_22);
  mediump vec3 tmpvar_23;
  highp vec3 N_24;
  N_24 = N_3;
  highp vec3 V_25;
  V_25 = V_2;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = pow (clamp ((1.001 - 
    dot (V_25, N_24)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_26 = (_RGBias + (tmpvar_27 * _RGScale));
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * _RGColor).xyz;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (tmpvar_26, 0.0, 1.0);
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (color_21, tmpvar_28, vec3((tmpvar_29 * _RGRatio)));
  tmpvar_23 = tmpvar_30;
  outColor_6.xyz = tmpvar_23;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_32;
    tmpvar_32 = (tmpvar_31 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_32.x) + ((1.0 - tmpvar_32.x) * tmpvar_23));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_31;
  color_31 = outColor_5.xyz;
  mediump vec3 tmpvar_32;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_32 = _lightProbColor.xyz;
  } else {
    tmpvar_32 = vec3(1.0, 1.0, 1.0);
  };
  color_31 = (outColor_5.xyz * tmpvar_32);
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (color_31, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_42;
    tmpvar_42 = (tmpvar_41 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_42.x) + ((1.0 - tmpvar_42.x) * tmpvar_33));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_43;
    scrpos_43 = xlv_TEXCOORD3;
    mediump float a_44;
    a_44 = xlv_TEXCOORD3.z;
    if ((a_44 < 0.95)) {
      scrpos_43.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_44 = (a_44 * 17.0);
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_43.y / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_43.x / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float x_51;
      x_51 = ((a_44 - _DITHERMATRIX[
        int(tmpvar_47)
      ][
        int(tmpvar_50)
      ]) - 0.01);
      if ((x_51 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_14.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  outColor_5.xyz = (outColor_5.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_74;
  color_74 = outColor_5.xyz;
  mediump vec3 tmpvar_75;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_75 = _lightProbColor.xyz;
  } else {
    tmpvar_75 = vec3(1.0, 1.0, 1.0);
  };
  color_74 = (outColor_5.xyz * tmpvar_75);
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = N_3;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (color_74, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_84;
    tmpvar_84 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_85;
    tmpvar_85 = (tmpvar_84 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_85.x) + ((1.0 - tmpvar_85.x) * tmpvar_76));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_86;
    scrpos_86 = xlv_TEXCOORD3;
    mediump float a_87;
    a_87 = xlv_TEXCOORD3.z;
    if ((a_87 < 0.95)) {
      scrpos_86.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_87 = (a_87 * 17.0);
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_86.y / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_86.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float x_94;
      x_94 = ((a_87 - _DITHERMATRIX[
        int(tmpvar_90)
      ][
        int(tmpvar_93)
      ]) - 0.01);
      if ((x_94 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  outColor_6.xyz = color_36;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_38;
    tmpvar_38 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_39;
    tmpvar_39 = (tmpvar_38 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_39.x) + ((1.0 - tmpvar_39.x) * color_36));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  outColor_5.xyz = color_46;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_48;
    tmpvar_48 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_49;
    tmpvar_49 = (tmpvar_48 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_49.x) + ((1.0 - tmpvar_49.x) * color_46));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  outColor_5.xyz = color_89;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_91;
    tmpvar_91 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_92;
    tmpvar_92 = (tmpvar_91 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_92.x) + ((1.0 - tmpvar_92.x) * color_89));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_5.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_4 * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_4 * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_4;
    };
  };
  outColor_6.xyz = diffColor_11;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (N_3, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_5.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_5.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_6.xyz = (diffColor_11 + color_16);
  outColor_6.w = _BloomFactor;
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_25.xyz = tmpvar_26.xyz;
  spColor_25.w = outColor_6.w;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * noiseTex_24.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (N_3, I_30)
   * N_3)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_34;
      tmpvar_34 = mix (spColor_25, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25 = tmpvar_34;
    };
  };
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (outColor_6.xyz, spColor_25.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_25.xyz = tmpvar_35;
  outColor_6.w = spColor_25.w;
  outColor_6.xyz = (spColor_25.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_36;
  color_36 = outColor_6.xyz;
  mediump vec3 tmpvar_37;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_37 = _lightProbColor.xyz;
  } else {
    tmpvar_37 = vec3(1.0, 1.0, 1.0);
  };
  color_36 = (outColor_6.xyz * tmpvar_37);
  mediump vec3 tmpvar_38;
  highp vec3 N_39;
  N_39 = N_3;
  highp vec3 V_40;
  V_40 = V_2;
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = pow (clamp ((1.001 - 
    dot (V_40, N_39)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_41 = (_RGBias + (tmpvar_42 * _RGScale));
  mediump vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_41 * _RGColor).xyz;
  mediump float tmpvar_44;
  tmpvar_44 = clamp (tmpvar_41, 0.0, 1.0);
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (color_36, tmpvar_43, vec3((tmpvar_44 * _RGRatio)));
  tmpvar_38 = tmpvar_45;
  outColor_6.xyz = tmpvar_38;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_47;
    tmpvar_47 = (tmpvar_46 * _FaceShadowColor.w).xyz;
    outColor_6.xyz = ((_FaceShadowColor.xyz * tmpvar_47.x) + ((1.0 - tmpvar_47.x) * tmpvar_38));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 tmpvar_18;
  tmpvar_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1 + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1 + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = tmpvar_18;
    };
  };
  outColor_5.xyz = diffColor_21;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (N_3, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_4.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_21 + color_26);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_35.xyz = tmpvar_36.xyz;
  spColor_35.w = outColor_5.w;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * noiseTex_34.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (N_3, I_40)
   * N_3)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_44;
      tmpvar_44 = mix (spColor_35, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35 = tmpvar_44;
    };
  };
  highp vec3 tmpvar_45;
  tmpvar_45 = mix (outColor_5.xyz, spColor_35.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_35.xyz = tmpvar_45;
  outColor_5.w = spColor_35.w;
  outColor_5.xyz = (spColor_35.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_46;
  color_46 = outColor_5.xyz;
  mediump vec3 tmpvar_47;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_47 = _lightProbColor.xyz;
  } else {
    tmpvar_47 = vec3(1.0, 1.0, 1.0);
  };
  color_46 = (outColor_5.xyz * tmpvar_47);
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = N_3;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (color_46, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_56 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_57.x) + ((1.0 - tmpvar_57.x) * tmpvar_48));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_58;
    scrpos_58 = xlv_TEXCOORD3;
    mediump float a_59;
    a_59 = xlv_TEXCOORD3.z;
    if ((a_59 < 0.95)) {
      scrpos_58.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_59 = (a_59 * 17.0);
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_58.y / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float tmpvar_63;
      tmpvar_63 = (scrpos_58.x / 4.0);
      highp float tmpvar_64;
      tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
      highp float tmpvar_65;
      if ((tmpvar_63 >= 0.0)) {
        tmpvar_65 = tmpvar_64;
      } else {
        tmpvar_65 = -(tmpvar_64);
      };
      highp float x_66;
      x_66 = ((a_59 - _DITHERMATRIX[
        int(tmpvar_62)
      ][
        int(tmpvar_65)
      ]) - 0.01);
      if ((x_66 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_3 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump float tmpvar_11;
  mediump vec3 N_12;
  N_12 = tmpvar_10;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_11 = ((dot (N_12, L_13) * 0.4975) + 0.5);
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_6.zw;
    tmpvar_5.xyw = o_17.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = spuvs_14;
  xlv_COLOR1 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _BloomFactor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump vec4 _FaceShadowColor;
uniform sampler2D _FaceShadowTex;
uniform mediump float _ShadowFace;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_7 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = tmpvar_7.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1 + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1 + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = tmpvar_61;
    };
  };
  outColor_5.xyz = diffColor_64;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (N_3, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_4.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_64 + color_69);
  outColor_5.w = _BloomFactor;
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD5.xy);
  spColor_78.xyz = tmpvar_79.xyz;
  spColor_78.w = outColor_5.w;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD5.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * noiseTex_77.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (N_3, I_83)
   * N_3)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_87;
      tmpvar_87 = mix (spColor_78, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78 = tmpvar_87;
    };
  };
  highp vec3 tmpvar_88;
  tmpvar_88 = mix (outColor_5.xyz, spColor_78.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_78.xyz = tmpvar_88;
  outColor_5.w = spColor_78.w;
  outColor_5.xyz = (spColor_78.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_89;
  color_89 = outColor_5.xyz;
  mediump vec3 tmpvar_90;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_90 = _lightProbColor.xyz;
  } else {
    tmpvar_90 = vec3(1.0, 1.0, 1.0);
  };
  color_89 = (outColor_5.xyz * tmpvar_90);
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = N_3;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (color_89, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_ShadowFace)) {
    lowp vec4 tmpvar_99;
    tmpvar_99 = texture2D (_FaceShadowTex, xlv_TEXCOORD0);
    mediump vec3 tmpvar_100;
    tmpvar_100 = (tmpvar_99 * _FaceShadowColor.w).xyz;
    outColor_5.xyz = ((_FaceShadowColor.xyz * tmpvar_100.x) + ((1.0 - tmpvar_100.x) * tmpvar_91));
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_101;
    scrpos_101 = xlv_TEXCOORD3;
    mediump float a_102;
    a_102 = xlv_TEXCOORD3.z;
    if ((a_102 < 0.95)) {
      scrpos_101.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_102 = (a_102 * 17.0);
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_101.y / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float tmpvar_106;
      tmpvar_106 = (scrpos_101.x / 4.0);
      highp float tmpvar_107;
      tmpvar_107 = (fract(abs(tmpvar_106)) * 4.0);
      highp float tmpvar_108;
      if ((tmpvar_106 >= 0.0)) {
        tmpvar_108 = tmpvar_107;
      } else {
        tmpvar_108 = -(tmpvar_107);
      };
      highp float x_109;
      x_109 = ((a_102 - _DITHERMATRIX[
        int(tmpvar_105)
      ][
        int(tmpvar_108)
      ]) - 0.01);
      if ((x_109 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = outColor_5;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
}
}
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 87051
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.w = xlv_COLOR0.w;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_3;
    scrpos_3 = xlv_TEXCOORD3;
    mediump float a_4;
    a_4 = xlv_TEXCOORD3.z;
    if ((a_4 < 0.95)) {
      scrpos_3.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_4 = (a_4 * 17.0);
      highp float tmpvar_5;
      tmpvar_5 = (scrpos_3.y / 4.0);
      highp float tmpvar_6;
      tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
      highp float tmpvar_7;
      if ((tmpvar_5 >= 0.0)) {
        tmpvar_7 = tmpvar_6;
      } else {
        tmpvar_7 = -(tmpvar_6);
      };
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_3.x / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float x_11;
      x_11 = ((a_4 - _DITHERMATRIX[
        int(tmpvar_7)
      ][
        int(tmpvar_10)
      ]) - 0.01);
      if ((x_11 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (xlv_COLOR0.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.w = xlv_COLOR0.w;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_3;
    scrpos_3 = xlv_TEXCOORD3;
    mediump float a_4;
    a_4 = xlv_TEXCOORD3.z;
    if ((a_4 < 0.95)) {
      scrpos_3.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_4 = (a_4 * 17.0);
      highp float tmpvar_5;
      tmpvar_5 = (scrpos_3.y / 4.0);
      highp float tmpvar_6;
      tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
      highp float tmpvar_7;
      if ((tmpvar_5 >= 0.0)) {
        tmpvar_7 = tmpvar_6;
      } else {
        tmpvar_7 = -(tmpvar_6);
      };
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_3.x / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float x_11;
      x_11 = ((a_4 - _DITHERMATRIX[
        int(tmpvar_7)
      ][
        int(tmpvar_10)
      ]) - 0.01);
      if ((x_11 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (xlv_COLOR0.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.w = xlv_COLOR0.w;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_3;
    scrpos_3 = xlv_TEXCOORD3;
    mediump float a_4;
    a_4 = xlv_TEXCOORD3.z;
    if ((a_4 < 0.95)) {
      scrpos_3.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_4 = (a_4 * 17.0);
      highp float tmpvar_5;
      tmpvar_5 = (scrpos_3.y / 4.0);
      highp float tmpvar_6;
      tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
      highp float tmpvar_7;
      if ((tmpvar_5 >= 0.0)) {
        tmpvar_7 = tmpvar_6;
      } else {
        tmpvar_7 = -(tmpvar_6);
      };
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_3.x / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float x_11;
      x_11 = ((a_4 - _DITHERMATRIX[
        int(tmpvar_7)
      ][
        int(tmpvar_10)
      ]) - 0.01);
      if ((x_11 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (xlv_COLOR0.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_1.w = outColor_4.w;
  color_1.xyz = (outColor_4.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD3;
    mediump float a_8;
    a_8 = xlv_TEXCOORD3.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_1.w = outColor_4.w;
  color_1.xyz = (outColor_4.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD3;
    mediump float a_8;
    a_8 = xlv_TEXCOORD3.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_1.w = outColor_4.w;
  color_1.xyz = (outColor_4.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD3;
    mediump float a_8;
    a_8 = xlv_TEXCOORD3.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
}
Fallback "Diffuse"
CustomEditor "MoleMole.CharacterShaderEditorBase"
}