//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_Face/Face_Trans" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_EnvColor ("Env Color", Color) = (1,1,1,1)
_Scale ("Scale Compared to Maya", Float) = 0.01
_BloomFactor ("Bloom Factor", Float) = 1
_MainTex ("Main Tex (RGB)", 2D) = "white" { }
_LightMapTex ("Light Map Tex (RGB)", 2D) = "gray" { }
_FaceMapTex ("Face Map Tex (A)", 2D) = "gray" { }
_ShadowColor ("Shadow Color", Color) = (0.9,0.7,0.75,1)
_ShadowFeather ("Shadow Feather", Range(0.0001, 1)) = 0.001
_OutlineWidth ("Outline Width", Range(0, 100)) = 0.2
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_MaxOutlineZOffset ("Max Outline Z Offset", Range(0, 100)) = 1
_OutlineCamStart ("Outline Camera Adjustment Start Distance", Range(0, 10000)) = 1000
[Header(Camera Fade)] _FadeDistance ("Fade Start Distance", Range(0.1, 10)) = 0.5
_FadeOffset ("Fade Start Offset", Range(0, 10)) = 1
[Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
_SPCubeMap ("SP CubeMap", Cube) = "white" { }
_SPCubeMapColor ("SP CubeMap Color", Color) = (1,1,1,0)
_SPCubeMapOffset ("SP CubeMap Offset", Vector) = (0,0,0,0)
_SPCubeMapIntensity ("SP CubeMap Intensity", Range(0, 1)) = 0
_SPCubeMapNoiseIntensity ("SP CubeMap Noise Intensity", Range(0, 5)) = 0
_SPCubeMapBrightness ("SP CubeMap Brightness", Float) = 1.26
_SPOldColor ("SP Old Color", Color) = (1,1,1,0)
[Toggle(RIM_GLOW)] _RimGlow ("Rim Glow", Float) = 0
_RGColor ("Rim Glow Color", Color) = (1,1,1,1)
_RGShininess ("Rim Glow Shininess", Float) = 1
_RGScale ("Rim Glow Scale", Float) = 1
_RGBias ("Rim Glow Bias", Float) = 0
_RGRatio ("Rim Glow Ratio", Range(0, 1)) = 0.5
_RGBloomFactor ("Rim Glow Bloom Factor", Float) = 1
[Toggle(DISTORTION)] _Distortion ("Distortion", Float) = 0
_DTTex ("Distortion Tex", 2D) = "gray" { }
_DTIntensity ("Distortion Intensity", Range(1, 9)) = 5
_DTPlaySpeed ("Distortion Play Speed", Float) = 0
_DTNormalDisplacment ("Distortion Normal Displacment", Float) = 0
_DTUVScaleInX ("Distortion UV Scale in X", Float) = 1
_DTUVScaleInY ("Distortion UV Scale in Y", Float) = 1
_DTFresnel ("Distortion Fresnel Params", Vector) = (1,1,0,0)
_Opaqueness ("Trans", Range(0, 1)) = 1
[Toggle(USINGDITHERALPAH)] _UsingDitherAlpha ("UsingDitherAlpha", Float) = 0
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
}
SubShader {
 LOD 200
 Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent-1" "Reflected" = "Reflected" "RenderType" = "Transparent" }
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent-1" "Reflected" = "Reflected" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
  GpuProgramID 59727
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump float diffuseThreshold_1;
  mediump vec3 baseTexColor_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4.w = 0.0;
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_1 = tmpvar_7;
  mediump float lightingThreshold_8;
  lightingThreshold_8 = xlv_TEXCOORD5.z;
  mediump float tmpvar_9;
  tmpvar_9 = max ((lightingThreshold_8 - _ShadowFeather), 0.0001);
  mediump float tmpvar_10;
  tmpvar_10 = clamp (((diffuseThreshold_1 - tmpvar_9) / (
    min ((lightingThreshold_8 + _ShadowFeather), 0.9999)
   - tmpvar_9)), 0.0, 1.0);
  outColor_4.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   * tex_Light_Color_3.y))) * baseTexColor_2);
  outColor_4.xyz = (outColor_4.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_11;
  color_11 = outColor_4.xyz;
  mediump vec3 tmpvar_12;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_12 = _lightProbColor.xyz;
  } else {
    tmpvar_12 = vec3(1.0, 1.0, 1.0);
  };
  color_11 = (outColor_4.xyz * tmpvar_12);
  outColor_4.xyz = color_11;
  outColor_4.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_13;
    scrpos_13 = xlv_TEXCOORD3;
    mediump float a_14;
    a_14 = xlv_TEXCOORD3.z;
    if ((a_14 < 0.95)) {
      scrpos_13.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_14 = (a_14 * 17.0);
      highp float tmpvar_15;
      tmpvar_15 = (scrpos_13.y / 4.0);
      highp float tmpvar_16;
      tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
      highp float tmpvar_17;
      if ((tmpvar_15 >= 0.0)) {
        tmpvar_17 = tmpvar_16;
      } else {
        tmpvar_17 = -(tmpvar_16);
      };
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_13.x / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float x_21;
      x_21 = ((a_14 - _DITHERMATRIX[
        int(tmpvar_17)
      ][
        int(tmpvar_20)
      ]) - 0.01);
      if ((x_21 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_24;
    tmpvar_24.x = tmpvar_23.x;
    tmpvar_24.y = (tmpvar_23.y * _ProjectionParams.x);
    o_22.xy = (tmpvar_24 + tmpvar_23.w);
    o_22.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_22.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  outColor_6.xyz = (outColor_6.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_15;
  color_15 = outColor_6.xyz;
  mediump vec3 tmpvar_16;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_16 = _lightProbColor.xyz;
  } else {
    tmpvar_16 = vec3(1.0, 1.0, 1.0);
  };
  color_15 = (outColor_6.xyz * tmpvar_16);
  mediump vec3 tmpvar_17;
  highp vec3 N_18;
  N_18 = N_2;
  highp vec3 V_19;
  V_19 = V_1;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = pow (clamp ((1.001 - 
    dot (V_19, N_18)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_20 = (_RGBias + (tmpvar_21 * _RGScale));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * _RGColor).xyz;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (tmpvar_20, 0.0, 1.0);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (color_15, tmpvar_22, vec3((tmpvar_23 * _RGRatio)));
  tmpvar_17 = tmpvar_24;
  outColor_6.xyz = tmpvar_17;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD3;
    mediump float a_26;
    a_26 = xlv_TEXCOORD3.z;
    if ((a_26 < 0.95)) {
      scrpos_25.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.y / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = (scrpos_25.x / 4.0);
      highp float tmpvar_31;
      tmpvar_31 = (fract(abs(tmpvar_30)) * 4.0);
      highp float tmpvar_32;
      if ((tmpvar_30 >= 0.0)) {
        tmpvar_32 = tmpvar_31;
      } else {
        tmpvar_32 = -(tmpvar_31);
      };
      highp float x_33;
      x_33 = ((a_26 - _DITHERMATRIX[
        int(tmpvar_29)
      ][
        int(tmpvar_32)
      ]) - 0.01);
      if ((x_33 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  outColor_6.xyz = color_30;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_1 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_4 = (tmpvar_7.xyz / tmpvar_7.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  tmpvar_3 = normalize(normalize((_glesNormal * tmpvar_8)));
  highp vec3 lightWorldDir_9;
  lightWorldDir_9 = _WorldSpaceLightPos0.xyz;
  highp vec2 texcoord_10;
  texcoord_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  bool flipInYAxis_12;
  highp vec3 lightLocalDir_13;
  highp float tmpvar_14;
  tmpvar_14 = sqrt(dot (lightWorldDir_9, lightWorldDir_9));
  if ((tmpvar_14 < 0.9)) {
    tmpvar_11 = vec3(0.0, 1.0, 0.0);
  } else {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = unity_WorldToObject[0].xyz;
    tmpvar_15[1] = unity_WorldToObject[1].xyz;
    tmpvar_15[2] = unity_WorldToObject[2].xyz;
    lightLocalDir_13 = (mat3(1.0, 0.0, 0.0, 0.0, 0.98481, -0.17365, 0.0, 0.17365, 0.98481) * normalize((tmpvar_15 * lightWorldDir_9)));
    highp float tmpvar_16;
    highp float tmpvar_17;
    tmpvar_17 = (min (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0) / max (abs(
      (lightLocalDir_13.z / lightLocalDir_13.y)
    ), 1.0));
    highp float tmpvar_18;
    tmpvar_18 = (tmpvar_17 * tmpvar_17);
    tmpvar_18 = (((
      ((((
        ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
       * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
     * tmpvar_18) + 0.9999793) * tmpvar_17);
    tmpvar_18 = (tmpvar_18 + (float(
      (abs((lightLocalDir_13.z / lightLocalDir_13.y)) > 1.0)
    ) * (
      (tmpvar_18 * -2.0)
     + 1.570796)));
    tmpvar_16 = (tmpvar_18 * sign((lightLocalDir_13.z / lightLocalDir_13.y)));
    if ((abs(lightLocalDir_13.y) > (1e-08 * abs(lightLocalDir_13.z)))) {
      if ((lightLocalDir_13.y < 0.0)) {
        if ((lightLocalDir_13.z >= 0.0)) {
          tmpvar_16 += 3.141593;
        } else {
          tmpvar_16 = (tmpvar_16 - 3.141593);
        };
      };
    } else {
      tmpvar_16 = (sign(lightLocalDir_13.z) * 1.570796);
    };
    highp float tmpvar_19;
    tmpvar_19 = (-(tmpvar_16) * 57.29578);
    flipInYAxis_12 = bool(0);
    if ((tmpvar_19 > 0.0)) {
      flipInYAxis_12 = bool(1);
    };
    highp float tmpvar_20;
    tmpvar_20 = clamp (abs((tmpvar_19 / 180.0)), 0.0001, 0.9999);
    if (flipInYAxis_12) {
      texcoord_10 = ((_glesMultiTexCoord0.xy * vec2(-1.0, 1.0)) + vec2(1.0, 0.0));
    };
    highp vec3 tmpvar_21;
    tmpvar_21.xy = texcoord_10;
    tmpvar_21.z = tmpvar_20;
    tmpvar_11 = tmpvar_21;
  };
  highp vec4 spuvs_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_glesVertex * 0.5);
  spuvs_22.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_24;
  tmpvar_24.x = (tmpvar_23.x + (tmpvar_23.z * tmpvar_23.z));
  tmpvar_24.y = ((tmpvar_23.y + (0.5 * tmpvar_23.z)) + ((0.5 * tmpvar_23.x) * tmpvar_23.x));
  spuvs_22.zw = ((tmpvar_24 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_1 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_1.zw;
    tmpvar_5.xyw = o_25.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_1;
  xlv_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD4 = spuvs_22;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _Opaqueness;
uniform sampler2D _FaceMapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _ShadowFeather;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 V_1;
  mediump vec3 N_2;
  mediump float diffuseThreshold_3;
  mediump vec3 baseTexColor_4;
  mediump vec3 tex_Light_Color_5;
  mediump vec4 outColor_6;
  outColor_6.w = 0.0;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  baseTexColor_4 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FaceMapTex, xlv_TEXCOORD5.xy).w;
  diffuseThreshold_3 = tmpvar_9;
  mediump float lightingThreshold_10;
  lightingThreshold_10 = xlv_TEXCOORD5.z;
  mediump float tmpvar_11;
  tmpvar_11 = max ((lightingThreshold_10 - _ShadowFeather), 0.0001);
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((diffuseThreshold_3 - tmpvar_11) / (
    min ((lightingThreshold_10 + _ShadowFeather), 0.9999)
   - tmpvar_11)), 0.0, 1.0);
  outColor_6.xyz = (mix (_ShadowColor, vec3(1.0, 1.0, 1.0), vec3((
    (tmpvar_12 * (tmpvar_12 * (3.0 - (2.0 * tmpvar_12))))
   * tex_Light_Color_5.y))) * baseTexColor_4);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  N_2 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_1 = tmpvar_14;
  mediump vec3 reflection_15;
  mediump vec3 R_16;
  mediump float intensity_17;
  mediump vec4 noiseTex_18;
  mediump vec4 spColor_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_19.xyz = tmpvar_20.xyz;
  spColor_19.w = outColor_6.w;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (((1.99 * noiseTex_18.x) * _SPNoiseScaler) - 1.0);
  intensity_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  highp vec3 I_24;
  I_24 = ((normalize(
    (V_1 - _WorldSpaceCameraPos)
  ) + (noiseTex_18 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_23 = (I_24 - (2.0 * (
    dot (N_2, I_24)
   * N_2)));
  R_16 = tmpvar_23;
  lowp vec3 tmpvar_25;
  tmpvar_25 = textureCube (_SPCubeMap, R_16).xyz;
  reflection_15 = tmpvar_25;
  highp vec3 tmpvar_26;
  mediump vec3 x_27;
  x_27 = (spColor_19.xyz * _SPOldColor.xyz);
  tmpvar_26 = mix (x_27, ((reflection_15 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_19.xyz = tmpvar_26;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_17 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_17 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_28;
      tmpvar_28 = mix (spColor_19, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_17) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_19 = tmpvar_28;
    };
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_6.xyz, spColor_19.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_19.xyz = tmpvar_29;
  outColor_6.w = spColor_19.w;
  outColor_6.xyz = (spColor_19.xyz * (_Color * _EnvColor).xyz);
  mediump vec3 color_30;
  color_30 = outColor_6.xyz;
  mediump vec3 tmpvar_31;
  if ((_lightProbToggle > 0.5)) {
    tmpvar_31 = _lightProbColor.xyz;
  } else {
    tmpvar_31 = vec3(1.0, 1.0, 1.0);
  };
  color_30 = (outColor_6.xyz * tmpvar_31);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = N_2;
  highp vec3 V_34;
  V_34 = V_1;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (color_30, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_6.xyz = tmpvar_32;
  outColor_6.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_6.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_6;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
}
}
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "DrawDepth" = "FrontFace" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent-1" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  Cull Front
  GpuProgramID 116677
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  color_1.w = (xlv_COLOR0.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_2;
    scrpos_2 = xlv_TEXCOORD3;
    mediump float a_3;
    a_3 = xlv_TEXCOORD3.z;
    if ((a_3 < 0.95)) {
      scrpos_2.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_3 = (a_3 * 17.0);
      highp float tmpvar_4;
      tmpvar_4 = (scrpos_2.y / 4.0);
      highp float tmpvar_5;
      tmpvar_5 = (fract(abs(tmpvar_4)) * 4.0);
      highp float tmpvar_6;
      if ((tmpvar_4 >= 0.0)) {
        tmpvar_6 = tmpvar_5;
      } else {
        tmpvar_6 = -(tmpvar_5);
      };
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_2.x / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float x_10;
      x_10 = ((a_3 - _DITHERMATRIX[
        int(tmpvar_6)
      ][
        int(tmpvar_9)
      ]) - 0.01);
      if ((x_10 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  color_1.w = (xlv_COLOR0.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_2;
    scrpos_2 = xlv_TEXCOORD3;
    mediump float a_3;
    a_3 = xlv_TEXCOORD3.z;
    if ((a_3 < 0.95)) {
      scrpos_2.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_3 = (a_3 * 17.0);
      highp float tmpvar_4;
      tmpvar_4 = (scrpos_2.y / 4.0);
      highp float tmpvar_5;
      tmpvar_5 = (fract(abs(tmpvar_4)) * 4.0);
      highp float tmpvar_6;
      if ((tmpvar_4 >= 0.0)) {
        tmpvar_6 = tmpvar_5;
      } else {
        tmpvar_6 = -(tmpvar_5);
      };
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_2.x / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float x_10;
      x_10 = ((a_3 - _DITHERMATRIX[
        int(tmpvar_6)
      ][
        int(tmpvar_9)
      ]) - 0.01);
      if ((x_10 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  color_1.w = (xlv_COLOR0.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_2;
    scrpos_2 = xlv_TEXCOORD3;
    mediump float a_3;
    a_3 = xlv_TEXCOORD3.z;
    if ((a_3 < 0.95)) {
      scrpos_2.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_3 = (a_3 * 17.0);
      highp float tmpvar_4;
      tmpvar_4 = (scrpos_2.y / 4.0);
      highp float tmpvar_5;
      tmpvar_5 = (fract(abs(tmpvar_4)) * 4.0);
      highp float tmpvar_6;
      if ((tmpvar_4 >= 0.0)) {
        tmpvar_6 = tmpvar_5;
      } else {
        tmpvar_6 = -(tmpvar_5);
      };
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_2.x / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float x_10;
      x_10 = ((a_3 - _DITHERMATRIX[
        int(tmpvar_6)
      ][
        int(tmpvar_9)
      ]) - 0.01);
      if ((x_10 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float intensity_2;
  mediump vec4 outColor_3;
  outColor_3 = _SPOutlineColor;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_5;
  tmpvar_5 = (((1.99 * tmpvar_4.x) * _SPNoiseScaler) - 1.0);
  intensity_2 = tmpvar_5;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_2 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_3 = xlv_COLOR0;
  };
  color_1.xyz = (outColor_3.xyz * _Color.xyz);
  color_1.w = (outColor_3.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD3;
    mediump float a_7;
    a_7 = xlv_TEXCOORD3.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float intensity_2;
  mediump vec4 outColor_3;
  outColor_3 = _SPOutlineColor;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_5;
  tmpvar_5 = (((1.99 * tmpvar_4.x) * _SPNoiseScaler) - 1.0);
  intensity_2 = tmpvar_5;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_2 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_3 = xlv_COLOR0;
  };
  color_1.xyz = (outColor_3.xyz * _Color.xyz);
  color_1.w = (outColor_3.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD3;
    mediump float a_7;
    a_7 = xlv_TEXCOORD3.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float intensity_2;
  mediump vec4 outColor_3;
  outColor_3 = _SPOutlineColor;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_5;
  tmpvar_5 = (((1.99 * tmpvar_4.x) * _SPNoiseScaler) - 1.0);
  intensity_2 = tmpvar_5;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_2 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_3 = xlv_COLOR0;
  };
  color_1.xyz = (outColor_3.xyz * _Color.xyz);
  color_1.w = (outColor_3.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD3;
    mediump float a_7;
    a_7 = xlv_TEXCOORD3.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
}
Fallback "Diffuse"
CustomEditor "MoleMole.CharacterShaderEditorBase"
}