//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Scenes/Scenes_DLC/LightMapUnity_Matcap_Emission_AddLight_CamClip" {
Properties {
[MHYHeaderBox(OPTIONS)] [Enum(UnityEngine.Rendering.CullMode)] _CullMode ("Cull Mode", Float) = 2
[Toggle(_ALPHATEST_ON)] _EnableAlphaCutoff ("Enable Alpha Cutoff", Float) = 0
[MHYKeywordFilter(_ALPHATEST_ON On)] _AlphaCutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
[MHYHeaderBox(MAPS)] [MHYSingleLineTextureNoScaleOffset(_Color)] _MainTex ("Albedo", 2D) = "white" { }
_Color ("Color", Color) = (1,1,1,1)
[MHYTextureScaleOffset] _MainMaps_ST ("Main Maps ST", Vector) = (1,1,0,0)
[MHYSingleLineTextureNoScaleOffset] _PropertyLightmapTex ("LightMap", 2D) = "gray" { }
[MHYTextureScaleOffset] _PropertyLightmapTexTS ("PropertyLightmapTexTS", Vector) = (0,0,0,0)
_ShadowColor ("Shadow Color", Color) = (0.5,0.5,0.5,1)
_ShadowIntegration ("Shadow Integration", Range(0, 1)) = 0.2
[MHYHeaderBox(LIGHTING)] _BloomIntensity ("Bloom Intensity", Range(0, 50)) = 1
_LightMapIntensity ("Light Map Intensity", Range(0, 5)) = 1.5
_FogTune ("Fog Tune", Range(0, 1)) = 1
_LightingColor ("Lighting Color", Color) = (0.2,0.2,0.2,1)
[MHYHeaderBox(MATCAP)] _MatcapMaskMap ("MatcapMask Map", 2D) = "white" { }
_BumpMap ("Normal Map", 2D) = "bump" { }
_MatCap ("MatCap (RGB)", 2D) = "white" { }
_MetalRef ("MetalRef", Range(0, 1)) = 0
_EmissionMask ("Emission Mask", 2D) = "black" { }
[Enum(R,0,G,1,B,2)] _UseChannel ("Use Channel", Float) = 1
[Enum(UV1st,0,UV2nd,1)] _UseSet ("UV Set", Float) = 1
_Emission ("Emission Color", Color) = (0,0,0,0.5)
_EmissionGIIntensity ("Emission GI Intensity", Range(0, 10)) = 2
[MHYHeaderBox(MATCAP SPECULAR)] [Toggle(_SEPARATE_SPECULAR_ON)] _EnableMatcapSpecular ("Enable Sperate Specular", Float) = 0
_SpecularMap ("Specular MatCap", 2D) = "black" { }
_SpecularIntensity ("Specular Intensity", Range(0, 1)) = 0
_LightmapThreshold ("Lightmap Threshold", Range(0, 1)) = 0.5
_IntensityInLightmap ("Intensity In Lightmap", Range(0, 1)) = 0.1
[MHYHeaderBox(LIGHTMAP)] [Toggle(_LIGHTMAPCOLOR_ON)] _EnableLightmapColor ("Enable LightmapColor Change", Float) = 0
_LightmapColorScale ("LightmapColorScale", Range(0, 4)) = 1.85
_LightmapColorIns ("LightmapColorIns", Range(0, 2)) = 0.9
_LightmapColorChange ("LightmapColorChange (RGB)", 2D) = "white" { }
_LightmapColorLerp ("LightmapColorLerp", Range(0, 1)) = 1
_LightmapDarkArea ("LightmapDarkArea", Range(0, 0.5)) = 0
_LightmapDarkPromotion ("LightmapDarkPromotion", Range(0, 1)) = 0
[MHYHeaderBox(ADDLIGHT)] _AdditiveLightPower ("Additive Light Power", Range(0.1, 5)) = 1
_AdditiveLightIntensity ("Additive Light Intensity", Range(0, 1)) = 1
[MHYHeaderBox(CAMCLIP)] _FadeDistance ("Fade Start Distance", Range(0.1, 10)) = 0.5
_FadeOffset ("Fade Start Offset", Range(0, 10)) = 1
}
SubShader {
 LOD 600
 Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARDONLY"
  LOD 600
  Tags { "DrawDepth" = "FrontFace" "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
  Cull Off
  GpuProgramID 65487
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
}
}
 Pass {
  Name "CONSTANT_REPLACE"
  LOD 600
  Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
  GpuProgramID 122166
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Common/AddLight/ADDLIGHT"
 UsePass "Hidden/miHoYo/DLC/Common/Meta/META"
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
SubShader {
 LOD 200
 Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARDONLY"
  LOD 200
  Tags { "DrawDepth" = "FrontFace" "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
  Cull Off
  GpuProgramID 136267
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    highp float tmpvar_23;
    tmpvar_23 = clamp ((_LightmapDarkArea - gray_19), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_22 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp)) + (tmpvar_23 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_31 * worldNorm_8);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_8, tmpvar_32)
   * worldNorm_8)));
  R_7 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_6 = tmpvar_36;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_37;
    highp vec2 P_38;
    P_38 = ((tmpvar_35 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_37 = texture2D (_SpecularMap, P_38);
    mediump float tmpvar_39;
    tmpvar_39 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_37 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_39 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_24 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_40;
  tmpvar_40 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_41;
  tmpvar_41 = texture2D (_EmissionMask, tmpvar_40).xyz;
  emissionTex_4 = tmpvar_41;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_42;
    tmpvar_42 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_42;
  };
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_43);
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_11;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_44;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_11;
  tmpvar_46.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    highp float tmpvar_22;
    tmpvar_22 = clamp ((_LightmapDarkArea - gray_18), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_21 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp)) + (tmpvar_22 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_30 * worldNorm_8);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_8, tmpvar_31)
   * worldNorm_8)));
  R_7 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_6 = tmpvar_35;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_36;
    highp vec2 P_37;
    P_37 = ((tmpvar_34 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_36 = texture2D (_SpecularMap, P_37);
    mediump float tmpvar_38;
    tmpvar_38 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_36 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_38 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_23 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_39;
  tmpvar_39 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMask, tmpvar_39).xyz;
  emissionTex_4 = tmpvar_40;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_41;
    tmpvar_41 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_41;
  };
  mediump vec3 tmpvar_42;
  tmpvar_42 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_42);
  mediump vec3 tmpvar_43;
  mediump vec3 srcColor_44;
  srcColor_44 = colorBlendLightMap_11;
  tmpvar_43 = (xlv_COLOR1.xyz + (srcColor_44 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_43;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_45;
  tmpvar_45.xyz = colorBlendLightMap_11;
  tmpvar_45.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_45;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    highp float tmpvar_24;
    tmpvar_24 = clamp ((_LightmapDarkArea - gray_20), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_23 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp)) + (tmpvar_24 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = (fc_12 * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_32 * worldNorm_8);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_8, tmpvar_33)
   * worldNorm_8)));
  R_7 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_6 = tmpvar_37;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_38;
    highp vec2 P_39;
    P_39 = ((tmpvar_36 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_38 = texture2D (_SpecularMap, P_39);
    mediump float tmpvar_40;
    tmpvar_40 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_38 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_40 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_25 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_41;
  tmpvar_41 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_EmissionMask, tmpvar_41).xyz;
  emissionTex_4 = tmpvar_42;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_43;
    tmpvar_43 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_43;
  };
  mediump vec3 tmpvar_44;
  tmpvar_44 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_44);
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_11;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_45;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_11;
  tmpvar_47.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_15.w;
  lowp vec4 color_16;
  color_16 = tmpvar_15;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_16.xyz);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_17;
  highp vec2 screenCoord_18;
  screenCoord_18 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_19;
  shadow_19 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_18);
    shadow_19 = tmpvar_20.x;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_21;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_22;
    mediump float tmpvar_23;
    tmpvar_23 = dot (tmpvar_21, vec3(0.299, 0.587, 0.114));
    gray_22 = tmpvar_23;
    highp vec2 tmpvar_24;
    tmpvar_24.y = 0.5;
    tmpvar_24.x = (gray_22 * _LightmapColorScale);
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_LightmapColorChange, tmpvar_24);
    highp float tmpvar_26;
    tmpvar_26 = clamp ((_LightmapDarkArea - gray_22), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_25 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_21, vec3(_LightmapColorLerp)) + (tmpvar_26 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_19))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_27 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_MatrixV[0].xyz;
  tmpvar_34[1] = unity_MatrixV[1].xyz;
  tmpvar_34[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_34 * worldNorm_8);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_35 - (2.0 * (
    dot (worldNorm_8, tmpvar_35)
   * worldNorm_8)));
  R_7 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MatCap, tmpvar_38);
  mc_6 = tmpvar_39;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_40;
    highp vec2 P_41;
    P_41 = ((tmpvar_38 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_40 = texture2D (_SpecularMap, P_41);
    mediump float tmpvar_42;
    tmpvar_42 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_40 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_42 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_27 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_43;
  tmpvar_43 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMask, tmpvar_43).xyz;
  emissionTex_4 = tmpvar_44;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_45;
    tmpvar_45 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_45;
  };
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_46);
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_11;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_47;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_11;
  tmpvar_49.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    highp float tmpvar_25;
    tmpvar_25 = clamp ((_LightmapDarkArea - gray_21), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_24 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp)) + (tmpvar_25 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_26 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_MatrixV[0].xyz;
  tmpvar_33[1] = unity_MatrixV[1].xyz;
  tmpvar_33[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_33 * worldNorm_8);
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 - (2.0 * (
    dot (worldNorm_8, tmpvar_34)
   * worldNorm_8)));
  R_7 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = ((tmpvar_36.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MatCap, tmpvar_37);
  mc_6 = tmpvar_38;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_39;
    highp vec2 P_40;
    P_40 = ((tmpvar_37 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_39 = texture2D (_SpecularMap, P_40);
    mediump float tmpvar_41;
    tmpvar_41 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_39 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_41 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_26 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_42;
  tmpvar_42 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMask, tmpvar_42).xyz;
  emissionTex_4 = tmpvar_43;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_44;
    tmpvar_44 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_44;
  };
  mediump vec3 tmpvar_45;
  tmpvar_45 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_45);
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_11;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_46;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_11;
  tmpvar_48.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_14.w = tmpvar_17.w;
  lowp vec4 color_18;
  color_18 = tmpvar_17;
  lmtex_14.xyz = (unity_Lightmap_HDR.x * color_18.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_19;
  highp vec2 screenCoord_20;
  screenCoord_20 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_21;
  shadow_21 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_20);
    shadow_21 = tmpvar_22.x;
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    highp float tmpvar_28;
    tmpvar_28 = clamp ((_LightmapDarkArea - gray_24), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_27 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp)) + (tmpvar_28 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_21))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_36 * worldNorm_8);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_8, tmpvar_37)
   * worldNorm_8)));
  R_7 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_6 = tmpvar_41;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_45;
  tmpvar_45 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_EmissionMask, tmpvar_45).xyz;
  emissionTex_4 = tmpvar_46;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_47;
    tmpvar_47 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_47;
  };
  mediump vec3 tmpvar_48;
  tmpvar_48 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_48);
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_11;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_49;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_11;
  tmpvar_51.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec2 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_6 = _glesMultiTexCoord1.xy;
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_4 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.x;
  tmpvar_20.y = worldBinormal_2.x;
  tmpvar_20.z = worldNormal_4.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.y;
  tmpvar_21.y = worldBinormal_2.y;
  tmpvar_21.z = worldNormal_4.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.z;
  tmpvar_22.y = worldBinormal_2.z;
  tmpvar_22.z = worldNormal_4.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase.xyz + (h_32 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_34 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  tmpvar_24 = tmpvar_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5 = _glesMultiTexCoord1.xy;
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_6 = _glesColor;
  highp vec4 o_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
  o_10.xy = (tmpvar_12 + tmpvar_11.w);
  o_10.zw = tmpvar_8.zw;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_14;
  tmpvar_14[0] = unity_WorldToObject[0].xyz;
  tmpvar_14[1] = unity_WorldToObject[1].xyz;
  tmpvar_14[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_glesNormal * tmpvar_14));
  worldNormal_3 = tmpvar_15;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_16 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_18 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.x;
  tmpvar_20.y = worldBinormal_1.x;
  tmpvar_20.z = worldNormal_3.x;
  tmpvar_7.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.y;
  tmpvar_21.y = worldBinormal_1.y;
  tmpvar_21.z = worldNormal_3.y;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.z;
  tmpvar_22.y = worldBinormal_1.z;
  tmpvar_22.z = worldNormal_3.z;
  highp float tmpvar_23;
  tmpvar_23 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_7.w = tmpvar_23;
  mediump vec4 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_26;
  mediump float fogFactor_27;
  mediump vec3 fogColor_28;
  mediump vec3 heightFogColor_29;
  highp float HeightFogFactor_30;
  mediump vec3 atomesphereFogColor_31;
  mediump float h_32;
  highp float linearFogDensity_33;
  mediump float len_34;
  highp float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_34 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((len_34 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_33 = (tmpvar_36 * (2.0 - tmpvar_36));
  if ((len_34 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_33 = (linearFogDensity_33 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_37;
  tmpvar_37 = min (pow (linearFogDensity_33, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_33 = tmpvar_37;
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((tmpvar_13.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  h_32 = (tmpvar_38 * (2.0 - tmpvar_38));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_HeigtFogColBase2.xyz + (h_32 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_31 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (atomesphereFogColor_31, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_34 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_31 = tmpvar_41;
  mediump float tmpvar_42;
  mediump float r_43;
  mediump float f_44;
  mediump float u_45;
  mediump float l_46;
  mediump float fogInt_47;
  fogInt_47 = 1.0;
  highp float tmpvar_48;
  tmpvar_48 = (_HeigtFogParams2.x * tmpvar_25.y);
  highp float tmpvar_49;
  tmpvar_49 = abs(tmpvar_48);
  if ((tmpvar_49 > 0.01)) {
    highp float tmpvar_50;
    tmpvar_50 = exp(-(tmpvar_48));
    fogInt_47 = ((1.0 - tmpvar_50) / tmpvar_48);
  };
  highp float tmpvar_51;
  tmpvar_51 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_46 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (l_46 * _HeigtFogParams2.y);
  u_45 = tmpvar_52;
  fogInt_47 = (fogInt_47 * u_45);
  mediump float tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (((l_46 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_53 = tmpvar_54;
  r_43 = (tmpvar_53 * (2.0 - tmpvar_53));
  r_43 = ((r_43 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_44 = ((1.0 - clamp (
    exp2(-(fogInt_47))
  , 0.0, 1.0)) * r_43);
  highp float tmpvar_55;
  tmpvar_55 = min (f_44, _HeigtFogColBase2.w);
  tmpvar_42 = tmpvar_55;
  HeightFogFactor_30 = tmpvar_42;
  highp vec3 tmpvar_56;
  tmpvar_56 = _Mihoyo_FogColor2.xyz;
  heightFogColor_29 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = ((heightFogColor_29 * HeightFogFactor_30) + ((atomesphereFogColor_31 * tmpvar_37) * (1.0 - HeightFogFactor_30)));
  fogColor_28 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = ((1.0 - tmpvar_37) * (1.0 - HeightFogFactor_30));
  fogFactor_27 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = fogColor_28;
  tmpvar_59.w = fogFactor_27;
  tmpvar_26 = tmpvar_59;
  highp vec4 tmpvar_60;
  mediump float fogFactor_61;
  mediump vec3 fogColor_62;
  mediump vec3 heightFogColor_63;
  highp float HeightFogFactor_64;
  mediump vec3 atomesphereFogColor_65;
  mediump float h_66;
  highp float linearFogDensity_67;
  mediump float len_68;
  highp float tmpvar_69;
  tmpvar_69 = sqrt(dot (tmpvar_25, tmpvar_25));
  len_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (((len_68 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_67 = (tmpvar_70 * (2.0 - tmpvar_70));
  if ((len_68 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_67 = (linearFogDensity_67 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_71;
  tmpvar_71 = min (pow (linearFogDensity_67, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_67 = tmpvar_71;
  mediump float tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((tmpvar_13.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  h_66 = (tmpvar_72 * (2.0 - tmpvar_72));
  highp vec3 tmpvar_74;
  tmpvar_74 = (_HeigtFogColBase3.xyz + (h_66 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_65 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = mix (atomesphereFogColor_65, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_68 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_65 = tmpvar_75;
  mediump float tmpvar_76;
  mediump float r_77;
  mediump float f_78;
  mediump float u_79;
  mediump float l_80;
  mediump float fogInt_81;
  fogInt_81 = 1.0;
  highp float tmpvar_82;
  tmpvar_82 = (_HeigtFogParams3.x * tmpvar_25.y);
  highp float tmpvar_83;
  tmpvar_83 = abs(tmpvar_82);
  if ((tmpvar_83 > 0.01)) {
    highp float tmpvar_84;
    tmpvar_84 = exp(-(tmpvar_82));
    fogInt_81 = ((1.0 - tmpvar_84) / tmpvar_82);
  };
  highp float tmpvar_85;
  tmpvar_85 = sqrt(dot (tmpvar_25, tmpvar_25));
  l_80 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (l_80 * _HeigtFogParams3.y);
  u_79 = tmpvar_86;
  fogInt_81 = (fogInt_81 * u_79);
  mediump float tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (((l_80 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_87 = tmpvar_88;
  r_77 = (tmpvar_87 * (2.0 - tmpvar_87));
  r_77 = ((r_77 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_78 = ((1.0 - clamp (
    exp2(-(fogInt_81))
  , 0.0, 1.0)) * r_77);
  highp float tmpvar_89;
  tmpvar_89 = min (f_78, _HeigtFogColBase3.w);
  tmpvar_76 = tmpvar_89;
  HeightFogFactor_64 = tmpvar_76;
  highp vec3 tmpvar_90;
  tmpvar_90 = _Mihoyo_FogColor3.xyz;
  heightFogColor_63 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = ((heightFogColor_63 * HeightFogFactor_64) + ((atomesphereFogColor_65 * tmpvar_71) * (1.0 - HeightFogFactor_64)));
  fogColor_62 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = ((1.0 - tmpvar_71) * (1.0 - HeightFogFactor_64));
  fogFactor_61 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93.xyz = fogColor_62;
  tmpvar_93.w = fogFactor_61;
  tmpvar_60 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = mix (tmpvar_26, tmpvar_60, vec4(_LerpFactor));
  tmpvar_24 = tmpvar_94;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = o_10;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_TEXCOORD7 = tmpvar_22;
  xlv_COLOR1 = tmpvar_24;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform sampler2D _EmissionMask;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
uniform highp float _LightmapDarkArea;
uniform highp float _LightmapDarkPromotion;
uniform mediump vec4 _Emission;
uniform highp int _UseChannel;
uniform highp int _UseSet;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD5;
  mediump float emissionMask_3;
  mediump vec3 emissionTex_4;
  highp vec3 matcapSpecular_5;
  highp vec4 mc_6;
  mediump vec3 R_7;
  highp vec3 worldNorm_8;
  mediump vec4 MatcapMask_Color_9;
  mediump vec3 normals_10;
  highp vec3 colorBlendLightMap_11;
  mediump vec3 fc_12;
  mediump vec4 tex_C_Color_13;
  mediump vec4 lmtex_14;
  highp vec2 vpos_15;
  vpos_15 = (((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy) / 4.0);
  vpos_15.y = ((fract(vpos_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, vpos_15).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_13 = tmpvar_18;
  highp vec2 screenCoord_19;
  screenCoord_19 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w);
  mediump float shadow_20;
  shadow_20 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_19);
    shadow_20 = tmpvar_21.x;
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (lmtex_14.xyz * _ShadowColor);
  fc_12 = tmpvar_22;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_23;
    mediump float tmpvar_24;
    tmpvar_24 = dot (tmpvar_22, vec3(0.299, 0.587, 0.114));
    gray_23 = tmpvar_24;
    highp vec2 tmpvar_25;
    tmpvar_25.y = 0.5;
    tmpvar_25.x = (gray_23 * _LightmapColorScale);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_LightmapColorChange, tmpvar_25);
    highp float tmpvar_27;
    tmpvar_27 = clamp ((_LightmapDarkArea - gray_23), 0.0, 1.0);
    fc_12 = (mix ((
      (tmpvar_26 * _LightmapColorIns)
    .xyz * _ShadowColor), tmpvar_22, vec3(_LightmapColorLerp)) + (tmpvar_27 * _LightmapDarkPromotion));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = ((fc_12 * (1.0 - 
    (clamp ((lmtex_14.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_20))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_13.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_11 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_10 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_9 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD5.xyz, normals_10);
  worldNorm_8.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD6, normals_10);
  worldNorm_8.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD7, normals_10);
  worldNorm_8.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_8 = (tmpvar_35 * worldNorm_8);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD4.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_8, tmpvar_36)
   * worldNorm_8)));
  R_7 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_8, R_7, vec3(_MetalRef));
  worldNorm_8 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_6 = tmpvar_40;
  mc_6 = ((mc_6 * tex_C_Color_13) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_5 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_14.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_5 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_6.xyz = ((mc_6.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_5);
  colorBlendLightMap_11 = ((mc_6.xyz * MatcapMask_Color_9.x) + (colorBlendLightMap_11 * (1.0 - MatcapMask_Color_9.x)));
  highp vec2 tmpvar_44;
  tmpvar_44 = mix (xlv_TEXCOORD0.xy, xlv_TEXCOORD1, vec2(float(_UseSet)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_EmissionMask, tmpvar_44).xyz;
  emissionTex_4 = tmpvar_45;
  emissionMask_3 = 0.0;
  if ((_UseChannel == 2)) {
    emissionMask_3 = emissionTex_4.z;
  } else {
    highp float tmpvar_46;
    tmpvar_46 = mix (emissionTex_4.x, emissionTex_4.y, float(_UseChannel));
    emissionMask_3 = tmpvar_46;
  };
  mediump vec3 tmpvar_47;
  tmpvar_47 = ((emissionMask_3 * _Emission.xyz) * (_Emission.w * 2.0));
  colorBlendLightMap_11 = (colorBlendLightMap_11 + tmpvar_47);
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_11;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_11 = tmpvar_48;
  tmpvar_2.w = clamp (xlv_TEXCOORD5.w, 0.0, 1.0);
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_11;
  tmpvar_50.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
}
}
 Pass {
  Name "CONSTANT_REPLACE"
  LOD 200
  Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
  GpuProgramID 251962
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Common/Meta/META"
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
}